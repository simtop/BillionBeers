
ext.androidModule = { Boolean isApplication = false ->
    if(isApplication) {
        apply plugin: 'com.android.application'
    } else {
        apply plugin: 'com.android.library'
    }

    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-parcelize'
    apply plugin: 'kotlin-kapt'
    apply plugin: 'dagger.hilt.android.plugin'

    android {
        compileSdkVersion ApplicationConfig.compileSdk

        defaultConfig {
            minSdkVersion ApplicationConfig.minSdk
            targetSdkVersion ApplicationConfig.targetSdk
            versionCode ApplicationConfig.versionCode
            versionName ApplicationConfig.versionName

            multiDexEnabled true
            testInstrumentationRunner "com.simtop.billionbeers.di.MockTestRunner"
        }

        signingConfigs {
            release {
                //Load keystore
                def keystorePropertiesFile = rootProject.file("keystore.properties")
                def keystoreProperties = new Properties()
                if (keystorePropertiesFile.exists()) {
                    keystoreProperties.load(keystorePropertiesFile.newDataInputStream())
                }

                def localStoreFile = keystoreProperties.getProperty('STORE_FILE')
                def ciStoreFile = System.getenv('STORE_FILE')

                storeFile file(localStoreFile != null ? localStoreFile : ciStoreFile)

                def localStorePassword = keystoreProperties.getProperty('STORE_PASSWORD')
                def ciStorePassword = System.getenv('STORE_PASSWORD')

                storePassword localStorePassword != null ? localStorePassword : ciStorePassword

                def localAlias = keystoreProperties.getProperty('ALIAS')
                def ciAlias = System.getenv('ALIAS')

                keyAlias localAlias != null ? localAlias : ciAlias

                def localPassword = keystoreProperties.getProperty('PASSWORD')
                def ciPassword = System.getenv('PASSWORD')

                keyPassword localPassword != null ? localPassword : ciPassword
            }
        }

        buildTypes {
            debug {

            }
            release {
                minifyEnabled true
                debuggable false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.release
            }
        }

        // Always show the result of every unit test, even if it passes.
        testOptions.unitTests {
            includeAndroidResources = true

            all {
                testLogging {
                    events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
                }
                maxHeapSize = "1024m"
            }
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_1_8.toString()
        }

        buildFeatures {
            viewBinding = true
        }

        kapt {
            generateStubs = true
        }

        //Solves some problems for compilation for UI Test
        packagingOptions {
            pickFirst  "**/attach_hotspot_windows.dll"
            exclude 'META-INF/AL2.0'
            exclude 'META-INF/LGPL2.1'
            exclude 'META-INF/licenses/ASM'
        }
    }

    dependencies {
        implementation fileTree(dir: "libs", include: ["*.jar"])
        implementation Libs.kotlin_stdlib_jdk7
        implementation Libs.androidx_core_core_ktx
        implementation Libs.appcompat
        implementation Libs.material
        implementation Libs.constraintlayout

        implementation Libs.glide
        implementation Libs.lifecycle_extensions
        implementation Libs.converter_gson
        implementation Libs.logging_interceptor
        implementation Libs.room_compiler
        implementation Libs.room_ktx
        kapt Libs.room_runtime

        implementation Libs.hilt_android
        kapt Libs.hilt_android_compiler
        //implementation Libs.hilt_lifecycle_viewmodel
        kapt Libs.hilt_compiler

        testImplementation Libs.mockk_android
        testImplementation Libs.io_mockk_mockk
        testImplementation Libs.core_testing
        testImplementation Libs.kotlinx_coroutines_test
        testImplementation Libs.kluent
        testImplementation Libs.mockwebserver
        testImplementation Libs.junit

        androidTestImplementation Libs.hilt_android_testing
        kaptAndroidTest Libs.hilt_android_compiler
        //TODO check if I need it
        kaptAndroidTest Libs.hilt_compiler

        androidTestImplementation Libs.junit
        androidTestImplementation Libs.kotlin_test_junit
        androidTestImplementation Libs.kotlinx_coroutines_test
        androidTestImplementation Libs.espresso_core
        androidTestImplementation Libs.espresso_contrib
        androidTestImplementation Libs.espresso_idling_resource
        androidTestImplementation Libs.androidx_test_runner
        androidTestImplementation Libs.androidx_test_rules
        androidTestImplementation Libs.androidx_test_core_ktx
        androidTestImplementation Libs.mockk_android
        androidTestImplementation Libs.io_mockk_mockk
        androidTestImplementation Libs.junit_ktx
        androidTestImplementation Libs.navigation_testing

        androidTestImplementation Libs.core_testing
        androidTestImplementation Libs.fragment_testing
    }
}