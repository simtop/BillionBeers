
ext.androidModule = { Boolean isApplication = false ->
    if(isApplication) {
        apply plugin: 'com.android.application'
    } else {
        apply plugin: 'com.android.library'
    }

    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-parcelize'
    apply plugin: 'kotlin-kapt'
    apply plugin: 'dagger.hilt.android.plugin'

    android {
        compileSdkVersion 31

        defaultConfig {
            minSdkVersion 21
            targetSdkVersion 31
            versionCode 51
            versionName "0.51"

            multiDexEnabled true
            testInstrumentationRunner "com.simtop.billionbeers.di.MockTestRunner"
        }

        signingConfigs {
            release {
                //Load keystore
                def keystorePropertiesFile = rootProject.file("keystore.properties")
                def keystoreProperties = new Properties()
                if (keystorePropertiesFile.exists()) {
                    keystoreProperties.load(keystorePropertiesFile.newDataInputStream())
                }

                def localStoreFile = keystoreProperties.getProperty('STORE_FILE')
                def ciStoreFile = System.getenv('STORE_FILE')
                if(localStoreFile == null && ciStoreFile == null) return

                storeFile file(localStoreFile != null ? localStoreFile : ciStoreFile)

                def localStorePassword = keystoreProperties.getProperty('STORE_PASSWORD')
                def ciStorePassword = System.getenv('STORE_PASSWORD')

                storePassword localStorePassword != null ? localStorePassword : ciStorePassword

                def localAlias = keystoreProperties.getProperty('ALIAS')
                def ciAlias = System.getenv('ALIAS')

                keyAlias localAlias != null ? localAlias : ciAlias

                def localPassword = keystoreProperties.getProperty('PASSWORD')
                def ciPassword = System.getenv('PASSWORD')

                keyPassword localPassword != null ? localPassword : ciPassword
            }
        }

        buildTypes {
            debug {
                testCoverageEnabled = true
            }
            release {
                minifyEnabled true
                debuggable false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.release
            }
        }

        kapt {
            correctErrorTypes true
        }

    // Always show the result of every unit test, even if it passes.
        testOptions.unitTests {
            includeAndroidResources = true

            all {
                testLogging {
                    events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
                }
                maxHeapSize = "1024m"
            }
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_11
            targetCompatibility JavaVersion.VERSION_11
        }
        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_11.toString()
        }

        buildFeatures {
            viewBinding = true
            compose = true
        }

        kapt {
            generateStubs = true
        }

        composeOptions {
            kotlinCompilerVersion "1.6.0"
            kotlinCompilerExtensionVersion "1.1.0-rc01"
        }

        //Solves some problems for compilation for UI Test
        packagingOptions {
            pickFirst  "**/attach_hotspot_windows.dll"
            exclude 'META-INF/AL2.0'
            exclude 'META-INF/LGPL2.1'
            exclude 'META-INF/licenses/ASM'
            exclude 'META-INF/*.kotlin_module'
        }
    }

    dependencies {
        implementation fileTree(dir: "libs", include: ["*.jar"])
        implementation libs.coreKtx
        implementation libs.appcompat
        implementation libs.material
        implementation libs.constraintlayout

        implementation libs.glide
        implementation libs.lifecycleExtensions
        implementation libs.retrofit2ConverterGson
        implementation libs.okhttp3LoggingInterceptor
        kapt libs.roomCompiler
        implementation libs.roomKtx
        kapt libs.roomRuntime

        implementation libs.hiltAndroid
        kapt libs.hiltCompiler

        // Compose
        implementation "androidx.compose.runtime:runtime:1.0.5"
        implementation "androidx.compose.ui:ui:1.0.5"
        implementation "androidx.compose.foundation:foundation:1.0.5"
        implementation "androidx.compose.foundation:foundation-layout:1.0.5"
        implementation "androidx.compose.material:material:1.0.5"
        implementation "androidx.compose.runtime:runtime-livedata:1.0.5"
        implementation "androidx.compose.ui:ui-tooling:1.0.5"

        testImplementation libs.mockkAndroid
        testImplementation libs.mockk
        testImplementation libs.coreTesting
        testImplementation libs.coroutinesTest
        testImplementation libs.kluentAndroid
        testImplementation libs.okhttp3Mockwebserver
        testImplementation libs.junit

        androidTestImplementation libs.hiltAndroidTesting
        kaptAndroidTest libs.hiltCompiler

        androidTestImplementation libs.junit
        androidTestImplementation libs.kotlinTestJunit
        androidTestImplementation libs.coroutinesTest
        androidTestImplementation libs.espressoCore
        androidTestImplementation libs.espressoContrib
        androidTestImplementation libs.espressoIdlingResource
        androidTestImplementation libs.testRunner
        androidTestImplementation libs.testRules
        androidTestImplementation libs.testCoreKtx
        androidTestImplementation libs.mockkAndroid
        androidTestImplementation libs.junitKtx
        androidTestImplementation libs.navigationTesting

        androidTestImplementation libs.coreTesting
        androidTestImplementation libs.fragmentTesting
    }
}